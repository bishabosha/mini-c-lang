[x] check scope for undeclared identifier access
[x] frame based scoping
    [x] flat frame field on functions
    [x] stack based scope structure in context
[>] a-normal form
    [x] constant folding
        [x] binary expression of constants
        [x] fold unary operator of constant
[x] return is tail
[x] bindings cursor
[x] interpreter of ast
[x] Need to encode in the current frame an id for each variable or temporary
[x] replace temporaries having inner values with assignments to a temporary,
    or else awful lalr descent will be needed
[x] record frame scope id so that captures are not recorded for ifs etc.
[x] parse DataMap in MIPS
[x] Remove DataKeys in favour of DataMap and frame.globals
[x] Add frame field to function
[x] Definition of func should be in scope for applications,
    [x] whole block must be examined first (bearing in mind forward
        declarations) 
[x] create data segment at Tac stage
[ ] Type check as an interpreter step
[>] tac
    [>] variables to be assigned at most once?
        [?] do have key value pairs of scope and identifier
            so that its current register can be recorded
[!] only use Cursor in a terminal consumer
[x] function definitions should not be added to bindings, please just a flag
[>] rename main
    [x] just add new declaration + isDefined to topLevel,
    [ ] replace Func node with new one with same frame and body but new ident
        [ ] { curr = 0; while (isdeclared(main + curr)) curr += 1; }
        [?] do this at first declaration

--- FEATURE FREEZE ---

[ ] hack in print_int and read_int
[>] blocks
    [>] reintroduce anon blocks
        [>] associate identifiers with unique scope ids in all exprs
            [ ] possibly make new case class for scoped identifiers,
                replace operators using Identifier with the new type
        [ ] inlining blocks is ok because variable names are associated to
            unique scope ids
    [>] if else
        [ ] update check for return in all branches

--- FEATURE EXTEND ---

[ ] in addition to recording when a function captures, record when its
    variables are captured
[>] redo whole memory model for MIPS
    [ ] implement "freeing" temporaries
    [ ] Add temporaries to the frame aot of mips etc.
    [!] move can only copy between registers
[ ] global variable name conflicts (with mips instructions) please remove
[ ] fix temporary folding

--- FOR REPORT ---

[ ] stack machine based interpreter for tac vs recursive descent
    of structured data
[ ] everything I removed from C.y
[ ] talk about WASM
[ ] changed data segment parsing from end to the start
[ ] previously temporaries contained nested expressions,
    bad for mapping as no canonical reference

[ ] abstract interpreters

[ ] need to fix recursion in ast node visiting

[>] improve mips speed
    [ ] bitset for used temp registers, use numbers not enums

[>] improve parse time
    [ ] polyglot_import("astToScala") or something like such
    [ ] specialised form of CAst to reduce match time
    [?] possible solution to global stack in mycc is to have a map that for
        each build process can allot a new bucket.
    [-] use node to make --C build server and replace main in Parser.scala
        [-] or try to send C callbacks to scala
    [?] no bison at all?