[x] check scope for undeclared identifier access
[x] frame based scoping
    [x] flat frame field on functions
    [x] stack based scope structure in context
[>] a-normal form
    [x] constant folding
        [x] binary expression of constants
        [x] fold unary operator of constant
[x] return is tail
[x] bindings cursor
[x] interpreter of ast
[x] Need to encode in the current frame an id for each variable or temporary
[x] replace temporaries having inner values with assignments to a temporary,
    or else awful lalr descent will be needed
[x] record frame scope id so that captures are not recorded for ifs etc.
[x] parse DataMap in MIPS
[x] Remove DataKeys in favour of DataMap and frame.globals
[x] Add frame field to function
[x] Definition of func should be in scope for applications,
    [x] whole block must be examined first (bearing in mind forward
        declarations) 
[x] rename main
    [x] just add new declaration + isDefined to topLevel,
    [x] replace Func node with new one with same frame and body but new ident
        [x] { curr = 0; while (isdeclared(main + curr)) curr += 1; }
[x] create data segment at Tac stage
[>] tac
    [>] variables to be assigned at most once?
        [?] do have key value pairs of scope and identifier
            so that its current register can be recorded
[!] only use Cursor in a terminal consumer
[x] function definitions should not be added to bindings, please just a flag

--- FEATURE FREEZE ---

[ ] dont associate Scope with ID until it is checked as declared 
[>] if else
[?] update check for return in all branches

--- COMPLETED ---

[x] reintroduce anon blocks
    [x] associate identifiers with unique scope ids in all exprs
    [x] possibly make new case class for scoped identifiers,
        replace operators using Identifier with the new type.
        Do the association at AST level, then bindings may be erased.
    [!] inlining blocks is ok because variable names are associated to
        unique scope ids
[x] make void a type that contains undefined single word value
[x] hack in print_int and read_int
    [x] push params to context and inline the definitions
[x] global variable name conflicts (with mips instructions) please remove
[x] fix temporary folding

--- FEATURE EXTEND ---

[ ] decouple registers from variable locations, need to have last known store
    for variable. Try to save last location of label
[ ] Type check applications
[ ] in addition to recording when a function captures, record when its
    variables are captured
[>] redo whole memory model for MIPS
    [ ] implement "freeing" temporaries
    [ ] Add temporaries to the frame aot of mips etc.
    [!] move can only copy between registers
[ ] add reverse register to variable map to context which can be used to then
    free the variable assignments

--- FOR REPORT ---

[ ] talk about checking if each block returns
[ ] stack machine based interpreter for tac vs recursive descent
    of structured data
[ ] everything I removed from C.y
[ ] talk about WASM
[ ] changed data segment parsing from end to the start
[ ] previously temporaries contained nested expressions,
    bad for mapping as no canonical reference

[ ] abstract interpreters

[ ] need to fix recursion in ast node visiting

[>] improve mips speed
    [ ] bitset for used temp registers, use numbers not enums

[>] improve parse time
    [ ] polyglot_import("astToScala") or something like such
    [ ] specialised form of CAst to reduce match time
    [?] possible solution to global stack in mycc is to have a map that for
        each build process can allot a new bucket.
    [-] use node to make --C build server and replace main in Parser.scala
        [-] or try to send C callbacks to scala
    [?] no bison at all?